{"version":3,"sources":["components/Search.js","components/Nav.js","components/NotFound.js","components/GalleryItem.js","components/Gallery.js","config.js","App.js","reportWebVitals.js","index.js"],"names":["Search","state","searchText","onSearchChange","e","setState","target","value","handleSubmit","preventDefault","route","query","props","history","push","currentTarget","reset","className","onSubmit","this","type","name","placeholder","ref","input","required","fill","height","viewBox","width","xmlns","d","Component","withRouter","Nav","to","NotFound","GalleryItem","src","server","id","secret","alt","title","flickrKey","Photo","displayResults","axios","get","then","res","resultsData","data","photos","photo","loading","catch","error","console","log","url","match","params","prevProps","prevState","length","picTick","map","pic","owner","App","exact","path","render","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be2e1a6e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\n\n/*\nThe search component first of all sets up a class, with a \"searchText\" element set up on the state.\nThe onSearchChange function is created, which updates said state with the value submitted by the form (via the event object).\n\nNext, the handleSubmit function (which also receives the event object (e)), prevents the form leaving the page (e.preventDefault()),\nbefore using props.history to push the user to the relevant url. This is where the search results will be queried and rendered.\nFinally, the search field is reset using e.currentTarget.reset().\n\nIn the render method, an onSubmit listener is added, which calls the handleSubmit function from the class.\nA ref (reference) is set up on the input field, meaning we can access it's results as this.query.\n\nThe search component also makes use of withRouter, meaning that the history object (line 32) can be accessed, as this is typically\nignored by <BrowserRouter>\n*/\n\nclass Search extends Component {\n\n  state = {\n    searchText: ''\n  }\n\n  onSearchChange = e => {\n    this.setState({searchText: e.target.value})\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.route = this.query.value;\n    this.props.history.push(`/search/${this.route}`);\n    e.currentTarget.reset();\n  }\n\n  render() {\n    return (\n        <form className=\"search-form\" onSubmit={this.handleSubmit}>\n        <input type=\"search\" name=\"search\" placeholder=\"Search\" ref={(input => this.query = input)} required/>\n        <button type=\"submit\" className=\"search-button\">\n          <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n          </svg>\n        </button>\n      </form>\n    )\n}\n}\n\nexport default withRouter(Search);","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\n// The NavLink component displays links to 3 default search values. As NavLink is used, the active link will be displayed as \"selected\".\nconst Nav = () => {\n    return(\n        <nav className=\"main-nav\">\n        <ul>\n          <li><NavLink to=\"/search/Cats\">Cats</NavLink></li>\n          <li><NavLink to=\"/search/Dogs\">Dogs</NavLink></li>\n          <li><NavLink to=\"/search/Gorillas\">Gorillas</NavLink></li>\n        </ul>\n      </nav>\n    )\n}\n\nexport default Nav;","import React from 'react';\n\n// The NotFound component displays an error message when there are no search results.\nconst NotFound = () => {\n    return(\n        <p>Unfortunately that page cannot be found! Please feel free to try again with another search!</p>\n    )\n}\n\nexport default NotFound;","import React from 'react';\n/*\nThe GalleryItem component receives the server, id, secret, and title parameters from Gallery.js, \nwhich are used to formulate the li and the flickr URL.\n*/\nconst GalleryItem = (props) => (\n    <li>\n        <img src={`https://live.staticflickr.com/${props.server}/${props.id}_${props.secret}.jpg`} alt={props.title} />\n    </li>\n);\n\nexport default GalleryItem;\n","import React, {Component} from 'react';\nimport GalleryItem from './GalleryItem';\nimport axios from 'axios';\nimport apiKey from '../config';\n\nconst flickrKey = apiKey;\n\nexport default class Photo extends Component {\n      constructor() {\n          super();\n\n  this.state = {\n    url: '',\n    resultsData: [],\n    loading: true\n  }\n      }\n\n  componentDidMount() {\n    this.setState({url: this.props.match.params.name});\n    this.displayResults(this.props.match.params.name);\n  }\n\n  /*\n  componentDidUpdate is used to reset the state in time for fresh searches. When the previous url is not the same as the current path, loading\n  is reset to true, and the displayResults function is called on the new path.\n  */\n  componentDidUpdate(prevProps, prevState) {\n      if (prevState.url !== this.props.match.params.name) {\n        this.setState({url: this.props.match.params.name, loading: true});\n        this.displayResults(this.props.match.params.name);\n      }\n    }\n\n/* \n  This is the main results function for search queries. It accepts a user input (or if one is not provided, a result is provided by default)\n  The function uses the axios.get method to fetch the photo results from flickr, and store them on the state (to be used in Gallery.js). The query\n  itself and the default value for loading are also set. Finally, a catch method is put in place to account for any potential errors.\n\n  The function stores the url, resultsData and loading value on the state, and defines the displayResults function that will return the photo \n  results. componentDidMount() is used to set the url on the state to match the current path, and then call displayResults() with said url \n  as a parameter. This means that whatever is typed after /search/, will be searched for!\n */\n\n  displayResults = (query = 'twenty one pilots') => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${flickrKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n    .then(res => {\n        this.setState({\n            resultsData: res.data.photos.photo,\n            loading: false\n          })\n        }\n        )\n        .catch(error => {\n          console.log('Error receiving the data!', error);\n        });\n      }\n  \n/*\nWithin the render method, we check to see if the loading state is true. If so, a <h1> will display a loading message. Once the data has been fetched\nsuccessfully, the loading state will be set to false by this.displayResults, and the program can proceed.\n\nNext, we check if the resultsData contains more than 0 results. If so, we map over the array, rendering a GalleryItem for each result.\nIf there are no results, a customised message is displayed.\n*/\n\n  render() {\n\n    if (this.state.loading) {\n        return(<h1>Loading...</h1>)\n    }\n    if (this.state.resultsData.length > 0) {\n    this.picTick = this.state.resultsData.map(pic => \n      <GalleryItem key={pic.id} owner={pic.owner} title={pic.title} id={pic.id} server={pic.server} secret={pic.secret}/>\n    );\n  return(\n      <div className=\"photo-container\">\n      <h2>{this.state.url} Photo Results</h2>\n      <ul>\n        {this.picTick}\n      </ul>\n    </div>\n  )\n} else if (this.state.resultsData.length === 0) {\n  return(\n    <div>\n      <h1>No results for {this.state.url} pictures unfortunately</h1>\n    </div>\n  )\n}\n}\n}\n","const apiKey = '2f1d2818c3b0fa2478bcf3a12673b853';\nexport default apiKey;","// Import the necessary Components and Dependencies for this Project\n\nimport React, {Component} from 'react';\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';\nimport Search from './components/Search';\nimport Nav from './components/Nav';\nimport NotFound from './components/NotFound';\nimport Gallery from './components/Gallery';\nimport './App.css';\n\nexport default class App extends Component {\n\n  /*\n  In the render method, we first create the container div, and set up the BrowserRouter container. The Search component is rendered, and passed the\n  function that displays results. Then, the <switch> statements are placed, so that the NotFound component can be rendered if the url doesn't match\n  the index route, or a Search route. The index route is redirected to show pictures of Dogs for ease of use. The search route is rendered with\n  props passed to it, meaning that it can access the pathname within its class. The Switch and BrowserRouter statements are then closed.\n  */\n  render() {\n    return (\n      <div className='container'>\n        <BrowserRouter>\n          {/* <Search doSearch={this.displayResults}/> */}\n          <Search />\n          <Nav />\n          <Switch>\n            <Route exact path='/'> <Redirect to=\"/search/Dogs\" /></Route>\n            <Route exact path='/search/'> <Redirect to=\"/search/Dogs\" /></Route>\n            <Route path=\"/search/:name\" render={(props) => <Gallery {...props} />}/> \n            <Route component={NotFound}/>\n          </Switch>\n        </BrowserRouter>\n      </div>\n    )\n  }\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}